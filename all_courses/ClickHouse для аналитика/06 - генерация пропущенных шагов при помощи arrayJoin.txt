Описание задачи:

У нас есть таблица с событиями пользователей в мобильном приложении, но, как это обычно бывает в жизни, не все события доходят до нашей таблицы. 
И это большая проблема, так как мы не можем корректно оценить последовательность действий, совершенных пользователем. 
Однако для части событий мы можем решить эту проблему.
Допустим наш пользователь пытается купить что-то на сайте, и мы точно знаем, что он не сможет сделать новый шаг без завершения предыдущего. 
Исходя из этого мы можем сгенерировать последовательность шагов для каждого пользователя.

Ваша задача в этом задании заполнить данные которые пропущены, у нас есть uid (пользователь) и step_ (имя шага, события). 
Шаги помечены номерами, они соответствуют последовательности действий, то есть идут друг за другом. 
Но часть из них пропущена, нужно их проставить. Нам известно что у нас 9 пользователей, и такая последовательность шагов

step a (1 шаг)
step b
step c
step d
step e
step f
step g
step w (последний шаг)
У каждого пользователя максимальный шаг свой! В задании не нужно использовать CROSS JOIN.

Формат ответа:

В качестве ответа нужно указать сумму по столбцу UID

---------------------------------------------------------------------
Данные для работы

CREATE VIEW events as 
SELECT tupleElement(array, 1) AS step, /* Шаг */
       tupleElement(array, 2) AS UID /* Идентификатор юзера */
FROM
  (SELECT arrayJoin([('step a', 1),('step c', 1), ('step b', 1), ('step d', 1), 
                     ('step a', 2),('step e', 2), ('step b', 2), ('step w', 2),
                     ('step a', 3),('step f', 3), ('step b', 3), ('step g', 3),
                     ('step a', 4),('step b', 4), ('step w', 4), ('step e', 4),
                     ('step a', 5),('step c', 5), ('step d', 5), ('step e', 5),
                     ('step b', 6), ('step b', 6), ('step c', 6),
                     ('step d', 7), ('step e', 7), ('step c', 7),
                     ('step g', 8), ('step a', 8), ('step b', 8),
                     ('step d', 9), ('step b', 9), ('step c', 9)]) AS array)
---------------------------------------------------------------------

Моё решение:


WITH final_step_letter AS (                     
SELECT UID, MAX(step) AS max_step_letter                    
FROM events
GROUP BY 1)

, final_step_number AS (
SELECT UID, 
CASE 
	WHEN max_step_letter ='step b' THEN 2
	WHEN max_step_letter ='step c' THEN 3
	WHEN max_step_letter ='step d' THEN 4
	WHEN max_step_letter ='step e' THEN 5
	WHEN max_step_letter ='step f' THEN 6
	WHEN max_step_letter ='step g' THEN 7
	WHEN max_step_letter ='step w' THEN 8
END AS max_step_number
FROM final_step_letter)

, array_join_table AS (
SELECT UID, arrayJoin(range(1,max_step_number+1))
FROM final_step_number)

SELECT SUM(UID) AS result
FROM array_join_table


Решение преподавателя:

SELECT UID,
       transform(1 + arrayJoin(range(toUInt8(max(step_id)))), [1, 2, 3, 4, 5, 6, 7, 8], ['step a',
         'step b',
         'step c', 'step d', 'step e', 'step f', 'step g', 'step w'], 'none') AS q
FROM events ANY
LEFT JOIN
  (SELECT step_id,
          step
   FROM
     (SELECT arrayJoin(array(('step a', 1), ('step b', 2), ('step c', 3), ('step d', 4), ('step e', 5), ('step f', 6), ('step g', 7), ('step w', 8))) AS tuple,
             tupleElement(tuple, 1) AS step,
             tupleElement(tuple, 2) AS step_id)) USING step
GROUP BY UID
SETTINGS joined_subquery_requires_alias=0;
