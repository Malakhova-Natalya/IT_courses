Практическая работа по темам JSON, составные типы данных и GEO

Задача по поиску расстояния между МКС (международной космической станции) и  ближайшего города. В первой витрине создается таблица, которая при обращении отдает координаты МКС в текущий момент, во втором датасете лежат города с их координатами. Нужно с помощью SELECT запроса найти ближайший город, над которым сейчас пролетает МКС. 

У этой задачи есть несколько вариантов решения, один из них использовать тип данных tuple для хранения координат, и с помощью функции untuple распаковать их, это позволит не писать 2 раза запрос к таблице с данными МКС, чтобы получить широту и долготу.

Создание витрин с которыми вы можете работать:

create view mks as 
SELECT *
FROM url('http://api.open-notify.org/iss-now.json', JSONAsString, 'json String');

create view cities as 
SELECT *
FROM url('https://raw.githubusercontent.com/dmitrii12334/clickhouse/main/cities', CSVWithNames, 'region String,city String, latitude Float64, longitude Float64');

Формат ответа:

Название города, и SQL запрос. 

------------------------------------------------------------------------------
Моё решение:

West Island

WITH mks_lat_long AS (
SELECT 
toFloat64(JSONExtractString(JSONExtractString(json, 'iss_position'),'latitude')) AS mks_latitude,
toFloat64(JSONExtractString(JSONExtractString(json, 'iss_position'),'longitude')) AS mks_longitude
FROM mks)

, mks_cities_diff AS (
SELECT *, greatCircleDistance(longitude, latitude, t2.mks_longitude, t2.mks_latitude) AS diff
FROM cities
CROSS JOIN mks_lat_long AS t2)

SELECT argMin(city, diff) AS min_diff_city
FROM mks_cities_diff

Решение преподавателя:

SELECT argMin(city,
		 greatCircleDistance(untuple(tuple(longitude,
		 latitude,
		 untuple(
	(SELECT toFloat64(JSONExtractString(JSONExtractString(json,
		 'iss_position'), 'longitude')), toFloat64(JSONExtractString(JSONExtractString(json, 'iss_position'), 'latitude'))
	FROM url('http://api.open-notify.org/iss-now.json', JSONAsString, 'json String')))))) * 0.001) AS mc
FROM cities
